---
name: Publish

on:
  workflow_call:
    inputs:
      registry:
        description: Docker registry name
        required: true
        type: string
      image-name:
        description: Image name
        required: true
        type: string
      release-tag:
        description: Semantic release version
        required: true
        type: string

  workflow_dispatch:
    inputs:
      registry:
        description: Docker registry name
        required: true
        type: string
      image-name:
        description: Image name
        required: true
        type: string
      release-tag:
        description: Semantic release version
        required: true
        type: string

permissions:
  id-token: write
  contents: write
  packages: write
  pull-requests: write
  security-events: write

jobs:

  sast:
    name: Validate code
    uses: ./.github/workflows/sast-scan.yaml
    permissions:
      contents: write
    with:
      rules: "p/csharp"
      upload-artifact: true
      upload-release-assets: true
      upload-results-github-security: true
      release-tag: ${{ inputs.release-tag }}

  sca:
    name: Validate dependencies
    uses: ./.github/workflows/sca-scan.yaml
    with:
      format: 'sarif'
      release-tag: ${{ inputs.release-tag }}
      severity: HIGH,CRITICAL
      upload-artifact: true
      upload-release-assets: true
      upload-results-github-security: false

  build_image:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.9.0
        id: buildx

      - name: Log in to Dockerhub
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_password }}

      - name: Extract metadata for docker
        uses: docker/metadata-action@v4
        id: metadata
        with:
          images: ${{ inputs.registry }}/${{ github.repository }}
          tags: |
            type=raw,value=latest
            type=sha
            type=sha,format=long
            type=semver,pattern={{version}},value=${{ inputs.release-tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          target: final
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Create Docker image URL
        id: build_image_url
        run: |
          echo "image_url=`${{ inputs.REGISTRY }}/${{ inputs.image-name }}:${{ inputs.release-tag }} | tr '[:upper:] '[:lower:]'`" >> $GITHUB_OUTPUT

      - name: Release Update - ${{ inputs.release-tag }}
        uses: softprops/action-gh-release@v1
        env:
          REGISTRY: ${{ env.REGISTRY }}
          REPOSITORY: ${{ github.repository }}
        with:
          tag_name: "v${{ inputs.release-tag }}"
          append_body: true
          body: |
            - Dockerhub container URL: ${{ steps.build_image_url.outputs.image_url }}
          token: ${{ secrets.GITHUB_TOKEN }}

  sbom:
    name: Scan SBOM
    uses: ./.github/workflows/sbom-scan.yaml
    needs: [build_image]
    secrets:
      registry-username: ${{ secrets.registry_username }}
      registry-password: ${{ secrets.registry_password }}
    with:
      image: "${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.release-tag}}"
      release-tag: ${{ inputs.release-tag }}
      scan-sbom: true
      severity: high
      upload-release-assets: true
      upload-artifact: true

  scan-iac:
    name: Scan IaC
    needs: [build_image]
    permissions:
      contents: write
    uses: ./.github/workflows/iac-scan.yaml
    with:
      exit-code: 1
      severity: HIGH,CRITICAL
      ignore-unfixed: true
      upload-artifact: true
      release-tag: ${{ inputs.release-tag }}
      upload-release-assets: true
      upload-results-github-security: false
