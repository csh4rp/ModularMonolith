// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModularMonolith.Infrastructure.DataAccess.Postgres;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModularMonolith.Infrastructure.Migrations.Postgres.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    partial class PostgresDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("consumer_id");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer")
                        .HasColumnName("receive_count");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("pk_inbox_state");

                    b.HasAlternateKey("MessageId", "ConsumerId")
                        .HasName("ak_inbox_state_message_id_consumer_id");

                    b.HasIndex("Delivered")
                        .HasDatabaseName("ix_inbox_state_delivered");

                    b.ToTable("inbox_state", "shared");

                    b.HasAnnotation("AuditIgnoreAnnotation", true);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("content_type");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid")
                        .HasColumnName("conversation_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("destination_address");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueue_time");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_time");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fault_address");

                    b.Property<string>("Headers")
                        .HasColumnType("text")
                        .HasColumnName("headers");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_consumer_id");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("initiator_id");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_type");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<string>("Properties")
                        .HasColumnType("text")
                        .HasColumnName("properties");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("response_address");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_time");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("source_address");

                    b.HasKey("SequenceNumber")
                        .HasName("pk_outbox_message");

                    b.HasIndex("EnqueueTime")
                        .HasDatabaseName("ix_outbox_message_enqueue_time");

                    b.HasIndex("ExpirationTime")
                        .HasDatabaseName("ix_outbox_message_expiration_time");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outbox_message_outbox_id_sequence_number");

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_outbox_message_inbox_message_id_inbox_consumer_id_sequence_");

                    b.ToTable("outbox_message", "shared");

                    b.HasAnnotation("AuditIgnoreAnnotation", true);
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("last_sequence_number");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lock_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.HasKey("OutboxId")
                        .HasName("pk_outbox_state");

                    b.HasIndex("Created")
                        .HasDatabaseName("ix_outbox_state_created");

                    b.ToTable("outbox_state", "shared");

                    b.HasAnnotation("AuditIgnoreAnnotation", true);
                });

            modelBuilder.Entity("ModularMonolith.Shared.DataAccess.EntityFramework.Postgres.AuditLogs.Models.AuditLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("EntityTypeName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("entity_type_name");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer")
                        .HasColumnName("operation_type");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_audit_log");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_audit_log_timestamp");

                    b.HasIndex("EntityTypeName", "Timestamp")
                        .HasDatabaseName("ix_audit_log_entity_type_name_timestamp");

                    b.ToTable("audit_log", "shared");
                });

            modelBuilder.Entity("ModularMonolith.Shared.DataAccess.EntityFramework.Postgres.EventLogs.Models.EventLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<JsonDocument>("EventPayload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_payload");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("event_type_name");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_event_log");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_event_log_timestamp");

                    b.HasIndex("EventTypeName", "Timestamp")
                        .HasDatabaseName("ix_event_log_event_type_name_timestamp");

                    b.ToTable("event_log", "shared");
                });

            modelBuilder.Entity("ModularMonolith.Shared.DataAccess.EntityFramework.Postgres.AuditLogs.Models.AuditLogEntity", b =>
                {
                    b.OwnsMany("ModularMonolith.Shared.DataAccess.AudiLogs.EntityField", "EntityKey", b1 =>
                        {
                            b1.Property<Guid>("AuditLogEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("AuditLogEntityId", "Id")
                                .HasName("pk_audit_log");

                            b1.ToTable("audit_log", "shared");

                            b1.ToJson("entity_key");

                            b1.WithOwner()
                                .HasForeignKey("AuditLogEntityId")
                                .HasConstraintName("fk_audit_log_audit_log_audit_log_entity_id");
                        });

                    b.OwnsMany("ModularMonolith.Shared.DataAccess.AudiLogs.EntityFieldChange", "EntityChanges", b1 =>
                        {
                            b1.Property<Guid>("AuditLogEntityId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("CurrentValue")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("OriginalValue")
                                .HasColumnType("text");

                            b1.HasKey("AuditLogEntityId", "Id")
                                .HasName("pk_audit_log");

                            b1.ToTable("audit_log", "shared");

                            b1.ToJson("entity_changes");

                            b1.WithOwner()
                                .HasForeignKey("AuditLogEntityId")
                                .HasConstraintName("fk_audit_log_audit_log_audit_log_entity_id");
                        });

                    b.OwnsOne("ModularMonolith.Shared.DataAccess.EntityFramework.Postgres.AuditLogs.Models.AuditLogEntityMetaData", "MetaData", b1 =>
                        {
                            b1.Property<Guid>("AuditLogEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("IpAddress")
                                .HasColumnType("text");

                            b1.Property<string>("OperationName")
                                .HasColumnType("text");

                            b1.Property<string>("ParentSpanId")
                                .HasColumnType("text");

                            b1.Property<string>("SpanId")
                                .HasColumnType("text");

                            b1.Property<string>("Subject")
                                .HasColumnType("text");

                            b1.Property<string>("TraceId")
                                .HasColumnType("text");

                            b1.Property<string>("Uri")
                                .HasColumnType("text");

                            b1.HasKey("AuditLogEntityId");

                            b1.ToTable("audit_log", "shared");

                            b1.ToJson("meta_data");

                            b1.WithOwner()
                                .HasForeignKey("AuditLogEntityId")
                                .HasConstraintName("fk_audit_log_audit_log_id");
                        });

                    b.Navigation("EntityChanges");

                    b.Navigation("EntityKey");

                    b.Navigation("MetaData")
                        .IsRequired();
                });

            modelBuilder.Entity("ModularMonolith.Shared.DataAccess.EntityFramework.Postgres.EventLogs.Models.EventLogEntity", b =>
                {
                    b.OwnsOne("ModularMonolith.Shared.DataAccess.EntityFramework.Postgres.EventLog.Models.EventLogEntityMetaData", "MetaData", b1 =>
                        {
                            b1.Property<Guid>("EventLogEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("IpAddress")
                                .HasColumnType("text");

                            b1.Property<string>("OperationName")
                                .HasColumnType("text");

                            b1.Property<string>("ParentSpanId")
                                .HasColumnType("text");

                            b1.Property<string>("SpanId")
                                .HasColumnType("text");

                            b1.Property<string>("Subject")
                                .HasColumnType("text");

                            b1.Property<string>("TraceId")
                                .HasColumnType("text");

                            b1.Property<string>("Uri")
                                .HasColumnType("text");

                            b1.HasKey("EventLogEntityId");

                            b1.ToTable("event_log", "shared");

                            b1.ToJson("meta_data");

                            b1.WithOwner()
                                .HasForeignKey("EventLogEntityId")
                                .HasConstraintName("fk_event_log_event_log_id");
                        });

                    b.Navigation("MetaData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
