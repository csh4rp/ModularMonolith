// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModularMonolith.CategoryManagement.Infrastructure.Common.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModularMonolith.CategoryManagement.Migrations.Migrations
{
    [DbContext(typeof(CategoryManagementDbContext))]
    [Migration("20240101084520_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("category_management")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModularMonolith.CategoryManagement.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_category_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_category_parent_id");

                    b.ToTable("category", "category_management");
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EntityState")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("entity_state");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("entity_type");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ip_address");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("operation_name");

                    b.Property<string>("ParentSpanId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("parent_span_id");

                    b.Property<string>("SpanId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("span_id");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("trace_id");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_log");

                    b.ToTable("audit_log", "shared", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventCorrelationLock", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<DateTimeOffset>("AcquiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acquired_at");

                    b.HasKey("CorrelationId")
                        .HasName("pk_event_correlation_lock");

                    b.ToTable("event_correlation_lock", "shared", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("event_name");

                    b.Property<string>("EventPayload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_payload");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("event_type");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ip_address");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("operation_name");

                    b.Property<string>("ParentSpanId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("parent_span_id");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("SpanId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("span_id");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("trace_id");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_event_log");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("ix_event_log_correlation_id");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("ix_event_log_published_at")
                        .HasFilter("published_at IS NULL");

                    b.HasIndex("UserId", "EventType", "CreatedAt")
                        .HasDatabaseName("ix_event_log_user_id_event_type_created_at");

                    b.ToTable("event_log", "shared", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventLogLock", b =>
                {
                    b.Property<Guid>("EventLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_log_id");

                    b.Property<DateTimeOffset>("AcquiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acquired_at");

                    b.HasKey("EventLogId")
                        .HasName("pk_event_log_lock");

                    b.ToTable("event_log_lock", "shared", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventLogPublishAttempt", b =>
                {
                    b.Property<Guid>("EventLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_log_id");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer")
                        .HasColumnName("attempt_number");

                    b.Property<DateTimeOffset>("NextAttemptAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_attempt_at");

                    b.HasKey("EventLogId", "AttemptNumber")
                        .HasName("pk_event_log_publish_attempt");

                    b.ToTable("event_log_publish_attempt", "shared", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("ModularMonolith.CategoryManagement.Domain.Entities.Category", b =>
                {
                    b.HasOne("ModularMonolith.CategoryManagement.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_category_category_category_id");
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.AuditLog", b =>
                {
                    b.OwnsMany("ModularMonolith.Shared.Domain.ValueObjects.EntityKey", "EntityKeys", b1 =>
                        {
                            b1.Property<Guid>("AuditLogId")
                                .HasColumnType("uuid")
                                .HasColumnName("audit_log_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("PropertyName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("property_name");

                            b1.Property<string>("Value")
                                .HasColumnType("text")
                                .HasColumnName("value");

                            b1.HasKey("AuditLogId", "Id")
                                .HasName("pk_audit_log");

                            b1.ToTable("audit_log", "shared", t =>
                                {
                                    t.Property("PropertyName")
                                        .HasColumnName("entity_key_property_name");
                                });

                            b1.ToJson("entity_keys");

                            b1.WithOwner()
                                .HasForeignKey("AuditLogId")
                                .HasConstraintName("fk_audit_log_audit_log_audit_log_id");
                        });

                    b.OwnsMany("ModularMonolith.Shared.Domain.ValueObjects.PropertyChange", "EntityPropertyChanges", b1 =>
                        {
                            b1.Property<Guid>("AuditLogId")
                                .HasColumnType("uuid")
                                .HasColumnName("audit_log_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("CurrentValue")
                                .HasColumnType("text")
                                .HasColumnName("current_value");

                            b1.Property<string>("OriginalValue")
                                .HasColumnType("text")
                                .HasColumnName("original_value");

                            b1.Property<string>("PropertyName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("property_name");

                            b1.HasKey("AuditLogId", "Id")
                                .HasName("pk_audit_log");

                            b1.ToTable("audit_log", "shared");

                            b1.ToJson("entity_property_changes");

                            b1.WithOwner()
                                .HasForeignKey("AuditLogId")
                                .HasConstraintName("fk_audit_log_audit_log_audit_log_id");
                        });

                    b.Navigation("EntityKeys");

                    b.Navigation("EntityPropertyChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
