// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModularMonolith.Shared.Domain.ValueObjects;
using ModularMonolith.Shared.Infrastructure.DataAccess.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModularMonolith.Shared.Migrations.Migrations
{
    [DbContext(typeof(SharedDbContext))]
    [Migration("20231226112717_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("shared")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<List<EntityKey>>("EntityKeys")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("entity_keys");

                    b.Property<List<PropertyChange>>("EntityPropertyChanges")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("entity_property_changes");

                    b.Property<string>("EntityState")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("entity_state");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ip_address");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("operation_name");

                    b.Property<string>("ParentSpanId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("parent_span_id");

                    b.Property<string>("SpanId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("span_id");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("trace_id");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_audit_log");

                    b.ToTable("audit_log", "shared");
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventCorrelationLock", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<DateTimeOffset>("AcquiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acquired_at");

                    b.HasKey("CorrelationId")
                        .HasName("pk_event_correlation_lock");

                    b.ToTable("event_correlation_lock", "shared");
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("event_name");

                    b.Property<string>("EventPayload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_payload");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("event_type");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ip_address");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("operation_name");

                    b.Property<string>("ParentSpanId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("parent_span_id");

                    b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("SpanId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("span_id");

                    b.Property<string>("TraceId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("trace_id");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_event_log");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("ix_event_log_correlation_id");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("ix_event_log_published_at")
                        .HasFilter("published_at IS NULL");

                    b.HasIndex("UserId", "EventType", "CreatedAt")
                        .HasDatabaseName("ix_event_log_user_id_event_type_created_at");

                    b.ToTable("event_log", "shared");
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventLogLock", b =>
                {
                    b.Property<Guid>("EventLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_log_id");

                    b.Property<DateTimeOffset>("AcquiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acquired_at");

                    b.HasKey("EventLogId")
                        .HasName("pk_event_log_lock");

                    b.ToTable("event_log_lock", "shared");
                });

            modelBuilder.Entity("ModularMonolith.Shared.Domain.Entities.EventLogPublishAttempt", b =>
                {
                    b.Property<Guid>("EventLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_log_id");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer")
                        .HasColumnName("attempt_number");

                    b.Property<DateTimeOffset>("NextAttemptAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_attempt_at");

                    b.HasKey("EventLogId", "AttemptNumber")
                        .HasName("pk_event_log_publish_attempt");

                    b.ToTable("event_log_publish_attempt", "shared");
                });
#pragma warning restore 612, 618
        }
    }
}
